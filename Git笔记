Git笔记
git特点：（1）版本控制：可以解决多人同时开发的代码问题，也可以解决找回历史代码的问题；
（2）分布式：git是分布式版本管理系统，同一个git仓库，可以分布到不同的机器上。首先找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个服务器仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。可以自己搭建这台服务器，也可以使用GitH网站。

git命令：
（1）进入某个目录，创建版本库：git init，该命令会创建一个.git隐藏目录，这就是版本库
（2）创建版本：git add code.txt   git commit -m ’版本1‘
（3）查看版本提交日志：git log
（4）回退到某一版本：git reset --hard HEAD^
其中HEAD表示当前最新版本，HEAD^表示当前版本的前一个版本，HEAD^^表示当前版本的前两个版本，也可以使用HEAD~1表示当前版本的前一个版本，HEAD~100表示当前版本的前100个版本。
（5）回退到当前版本的后面版本：git reset --hard 版本号
（6）查看对版本的操作记录：git reflog
（7）工作区（Working Directory）和版本库（Repository）：电脑中的目录，比如我们的git_test，就是一个工作区；工作区有一个隐藏目录.git，这个是版本库，版本库中有很多东西，其中最重要的就是stage（暂存区），还有git自动为我们创建的第一个分支master，以及指向master的一个指针叫HEAD，git add把文件添加到暂存区，git commit把暂存区的所有内容
提交到当前分支。
（8）查看当前工作树的状态：git status
（9）撤销修改：git checkout -- <文件>来丢弃工作区的改动
（10）撤销暂存区的修改：git reset HEAD 文件
（11）对比文件的不同：git diff HEAD -- code.txt
-代表HEAD版本中的内容，+代表工作区中的内容
（12）从版本库中删除文件：git rm 文件， git commit -m ’删除版本‘
分支管理：git把我们之前每次提交的版本串成一条时间线，这条时间线就是一个分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以HEAD指向的就是当前分支。
（1）查看分支：git branch
（2）创建分支：git branch <name>
（3）切换分支：git checkout <name>
（4）创建+切换分支：git checkout -b <name>
（5）合并某分支到当前分支：git merge <name>
（6）删除分支：git branch -d <name>
（7）当master和dev分支分别有新提交的内容，合并时需要解决冲突后提交，git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容。
（8）修改bug时创建一个bug分支来修改，但需要将手头未完成的工作’储藏‘起来，等以后恢复现场后继续工作：git stash,git stash pop
github使用：
（1）推送分支，就是把该分支上的所有本地提交推送到远程库，推送时要指定本地分支，这样，git就会把该分支推送到远程库对应的远程分支上： git push origin 分支名称
（2）将本地分支跟踪服务器分支：
git branch --set-upstream-to=origin/远程分支名称 本地分支名称
（3）从远程分支上拉取代码：git pull origin 分支名称，将远程分支smart上的代码下载并合并到本地所在分支。
工作使用git：
项目经理：搭建项目框架，框架搭建完成之后，把项目框架代码放到服务器。
普通员工：（1）在自己电脑上，生成ssh公钥，然后把公钥给项目经理，项目经理把它添加到服务器上；（2）组员根基项目代码地址把代码下载到自己的电脑上；
（3）创建本地的分支dev，在dev分支中进行每天的开发；
（4）每个组员开发完自己的代码之后，都需要将代码发布到远程的dev分支上。
Master：保存用户发布的项目代码。V1.0,V2.0
Dev：保存开发过程中的代码




